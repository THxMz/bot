# *- coding: utf-8 -*-

import os
import telebot
import description as dp
import tk
import telebot, logging, sys
import mysql.connector
import pyAesCrypt
from flask import Flask, request
from telebot import custom_filters, types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove

url = 'https://hxkmm.pythonanywhere.com/' #Config Host

#-----------------------------------------------------------------------------#
"Variable"
bot = telebot.TeleBot(tk.THxMz, threaded=False)
bt2 = telebot.TeleBot(tk.Private)
hd = ReplyKeyboardRemove()
sys.tracebacklimit = 0
#-----------------------------------------------------------------------------#
"Database"
cnx = mysql.connector.connect(
    host="hxkmm.mysql.pythonanywhere-services.com",
    user="hxkmm",
    passwd="‡∏ó‡∏±‡∏´‡πÜ‡∏™‡∏û‡∏ô‡∏ô‡∏∞",
    database="hxkmm$telex")
cur = cnx.cursor()
#-----------------------------------------------------------------------------#

"Webhook"
bot.remove_webhook()
bot.set_webhook(url=url)

"Path Reply markup Help_Command"
hmk = types.ReplyKeyboardMarkup(one_time_keyboard=False)
hmk.row_width = 3
hmk.add('Getapps', '‡∏£‡∏≠‡∏°', '‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏ô‡∏°', 'trCamera', 'Messenger', '‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á', 'Magisk', '‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏£‡∏≠‡∏°', '‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô', '‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', '‡πÇ‡∏ô‡πâ‡∏ï', '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ')
hmk.add('‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô üí∏', '‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏ü‡∏•‡πå', '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô/‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥')
hmk.add('‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö')

freeid = None
users = {}

app = Flask(__name__)
@app.route('/', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "!", 200

@app.route('/', methods=['GET'])
def webhook_get():
    return "HI, This is website for katies."

@bot.message_handler(commands=['start'])
def start(message: types.Message):
    global freeid
    if message.chat.id not in users:
        freeid = message.chat.id
        bot.send_message(message.chat.id, "‡∏î‡∏µ‡∏à‡πâ‡∏≤ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏¥‡πâ‡∏° > /auth", parse_mode='HTML', reply_markup=hd)
        bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
        logging.basicConfig(filename='user.log', encoding='utf-8', format='%(asctime)s %(message)s', datefmt='%d/%m/%Y %I:%M:%S %p')
        logging.warning((message.chat.id, message.from_user.first_name))
    else:
        bot.send_message(message.chat.id, "‡∏î‡∏µ‡∏à‡πâ‡∏≤ {name} ‡∏à‡∏¥‡πâ‡∏° -> /help ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°".format(name = message.from_user.first_name), reply_markup=hd)
        bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
    print(message.from_user.first_name, " : ", message.text)

@bot.message_handler(commands=['auth'])
def find(message):
    global freeid

    if message.chat.id not in users:
        bot.send_message(message.chat.id, '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö...')
        logging.basicConfig(filename='user.log', encoding='utf-8', format='%(asctime)s %(message)s', datefmt='%d/%m/%Y %I:%M:%S %p')
        logging.warning((message.chat.id, message.from_user.first_name))
        logging.warning((message.from_user.first_name, message.text))

        if freeid == None:
            freeid = message.chat.id
            popup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            popup.add('AUTH')
            msg = bot.send_message(message.chat.id, '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÇ‡∏õ‡∏£‡∏î‡∏à‡∏¥‡πâ‡∏°‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', reply_markup=popup)
            bot.register_next_step_handler(msg, find_step2)
        else:
            bot.send_message(message.chat.id, '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!')
            bot.send_message(freeid, dp.start.format(name=message.from_user.first_name), parse_mode='HTML', reply_markup=hd)

            users[freeid] = message.chat.id
            users[message.chat.id] = freeid
            freeid = None
        bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
        print(users, freeid)
    else:
        bot.send_message(message.chat.id, '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡∏∏‡∏ì <b>{name}!</b>'.format(name=message.from_user.first_name), parse_mode='HTML', reply_markup=hd)
        bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
    print(message.from_user.first_name, " : ", message.text)

def find_step2(message):
    global freeid
    
    if message.text == 'AUTH':
        if message.chat.id not in users:
            bot.send_message(message.chat.id, '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö...')

            if freeid == None:
                freeid = message.chat.id
                bot.send_message(message.chat.id, '‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÇ‡∏õ‡∏£‡∏î‡∏à‡∏¥‡πâ‡∏° -> /auth ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')
            else:
                bot.send_message(message.chat.id, '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏ô‡∏ï‡∏±‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', reply_markup=hd)
                bot.send_message(freeid, dp.start.format(name=message.from_user.first_name), parse_mode='HTML', reply_markup=hd)

                users[freeid] = message.chat.id 
                users[message.chat.id] = freeid
                freeid = None

                bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
                print(users, freeid)
        else:
            bot.send_message(message.chat.id, '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡∏∏‡∏ì <b>{name}!</b>'.format(name=message.from_user.first_name), parse_mode='HTML', reply_markup=hd)
            bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
        logging.basicConfig(filename='user.log', encoding='utf-8', format='%(asctime)s %(message)s', datefmt='%d/%m/%Y %I:%M:%S %p')
        logging.warning((message.from_user.first_name, message.text))
    else:
        bot.send_message(message.chat.id, 'Error Bug. Please contact to dev.')
        bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
    print(message.from_user.first_name, " : ", message.text)

@bot.message_handler(commands=['help'])
def help_command(message):
    if message.chat.id in users:
        msg = bot.reply_to(message, '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏≠‡πà‡∏¢', reply_markup=hmk)
        bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
        bot.register_next_step_handler(msg, help_next_step)
    else:
        bot.send_message(message.chat.id , '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏à‡πâ‡∏≤ ‡∏à‡∏¥‡πâ‡∏° -> /auth')
        bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
    logging.basicConfig(filename='user.log', encoding='utf-8', format='%(asctime)s %(message)s', datefmt='%d/%m/%Y %I:%M:%S %p')
    logging.warning((message.chat.id, message.from_user.first_name))
    print(message.from_user.first_name, " : ", message.text)

def help_next_step(message):
        textuser = message.text
        if (textuser == 'Getapps'):
            markup = InlineKeyboardMarkup()
            markup.row_width = 2
            markup.add(InlineKeyboardButton("MI Getapps", url='https://drive.google.com/file/d/1488kDsfk3IlUoQasxV-TqcelPu_gEoTy/view?usp=drivesdk'))
            h = bot.reply_to(message, dp.getapps, reply_markup=markup)
            bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
            bot.register_next_step_handler(h, help_next_step)

        elif (textuser == '‡∏£‡∏≠‡∏°'):
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
            markup.row_width = 3
            markup.add('vayu', 'lime', 'mojito', '‚¨ÖÔ∏è ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö')
            msg = bot.reply_to(message, '‡∏£‡∏∏‡πà‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡∏à‡πä‡∏∞', reply_markup=markup)
            bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
            bot.register_next_step_handler(msg, next_setup_devices)

        elif (textuser == '‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏ô‡∏°'):
            y = bot.reply_to(message, dp.codename, reply_markup=hmk ,parse_mode='HTML')
            bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
            bot.register_next_step_handler(y, help_next_step)

        elif (textuser == ('trCamera')):
            markup = InlineKeyboardMarkup()
            markup.row_width = 2
            markup.add(InlineKeyboardButton("‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà", url='https://drive.google.com/file/d/1Fj4RqOK0xz4c0Z57psNVuRHaEq2w4B1N/view?usp=sharing'))
            markup1 = types.ReplyKeyboardMarkup(one_time_keyboard=True,resize_keyboard=True)
            markup1.add('Help')
            markup1.row_width = 1
            bot.reply_to(message, dp.trcamera, reply_markup=markup)
            msg = bot.reply_to(message, '‡∏™‡πà‡∏ß‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Ñ‡∏∑‡∏≠‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ', reply_markup=markup1)
            bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
            bot.register_next_step_handler(msg, help_tr_step)

        elif (textuser == ('Messenger')):
            a = bot.reply_to(message, dp.Messenger, reply_markup=hmk, parse_mode='HTML')
            bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
            bot.register_next_step_handler(a, help_next_step)

        elif (textuser == ('‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á')):
            bt = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
            bt.row_width = 1
            bt.add('ADB Driver', '‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå', '‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á', '‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö')
            pl = bot.reply_to(message, dp.preun, parse_mode='HTML', reply_markup=bt)
            bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
            bot.register_next_step_handler(pl, unlock_step)

        elif (textuser == ('‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏ü‡∏•‡πå')):
            ch = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
            ch.add('‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏ü‡∏•‡πå', '‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏ü‡∏•‡πå', '‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö')
            s = bot.send_message(message.chat.id, "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏•‡∏¢‡∏à‡πâ‡∏≤", reply_markup=ch)
            bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
            bot.register_next_step_handler(s, encrypt_step)

        elif (textuser == ('Magisk')):
            i = bot.send_message(message.chat.id, dp.Magisk, parse_mode='HTML', disable_web_page_preview=True, reply_markup=hmk)
            bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
            bot.register_next_step_handler(i, help_next_step)

        elif (textuser == ('‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏£‡∏≠‡∏°')):
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
            markup.add('‡∏ñ‡∏±‡∏î‡πÑ‡∏õ', '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å')
            a = bot.reply_to(message, dp.textup, reply_markup=markup, parse_mode='HTML')
            bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
            bot.register_next_step_handler(a, uprom_setup.uprom)

        elif (textuser == ('‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ')):
            pl = bot.reply_to(message, '‡∏ß‡πà‡∏≤‡∏á ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏∞‡πÉ‡∏™‡πà‡∏≠‡∏∞‡πÑ‡∏£‡∏î‡∏µ', parse_mode='HTML',reply_markup=hmk)
            bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
            bot.register_next_step_handler(pl, help_next_step)

        elif (textuser == ('‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô')):
            pl = bot.reply_to(message, '‡∏ß‡πà‡∏≤‡∏á ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏∞‡πÉ‡∏™‡πà‡∏≠‡∏∞‡πÑ‡∏£‡∏î‡∏µ', parse_mode='HTML',reply_markup=hmk)
            bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
            bot.register_next_step_handler(pl, help_next_step)

        elif (textuser == ('‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô üí∏')):
            mk = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
            mk.add('SCB', 'K Plus')
            mk.add('ShopeePay')
            mk.add('True Wallet(1)', 'True Wallet(2)')
            mk.add('‚ùå Exit ‚ùå')
            a = bot.send_message(message.chat.id, dp.money, reply_markup=mk ,parse_mode='HTML')
            bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
            bot.register_next_step_handler(a, bank_photo)

        # Password
        elif (textuser == ('‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô')):
            a = bot.reply_to(message, '‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏Å‡πà‡∏≠‡∏ô', reply_markup=hd)
            bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
            bot.register_next_step_handler(a, mytab)
        elif (textuser == ('‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô/‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥')):
            a = bot.reply_to(message, '‡∏ó‡∏¥‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ß‡πâ‡πÄ‡∏•‡∏¢ ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÑ‡∏õ‡πÇ‡∏ú‡∏•‡πà‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤ üòÅ', reply_markup=hd)
            bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
            bot.register_next_step_handler(a, report)
        elif (textuser == '‡πÇ‡∏ô‡πâ‡∏ï'):
            n = bot.send_message(message.chat.id, "‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏Å‡πà‡∏≠‡∏ô", reply_markup=hd)
            bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
            bot.register_next_step_handler(n, note)
        
        elif (textuser == '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö'):
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
            markup.row_width = 1
            markup.add('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‚úî', '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‚ùå')
            msg = bot.reply_to(message, "‡πÇ‡∏õ‡∏£‡∏î‡∏à‡∏¥‡πâ‡∏° '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô' ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", reply_markup=markup)
            bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
            bot.register_next_step_handler(msg, stop)
        else:
            bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
            bot.reply_to(message, "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        logging.basicConfig(filename='user.log', encoding='utf-8', format='%(asctime)s %(message)s', datefmt='%d/%m/%Y %I:%M:%S %p')
        logging.warning((message.from_user.first_name, message.text))
        print(message.from_user.first_name, " : ", message.text)

def encrypt_step(message):
    if message.text == '‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏ü‡∏•‡πå':
        s = bot.send_message(message.chat.id, "‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡∏à‡πâ‡∏≤ ‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏´‡πâ", reply_markup=hd)
        bot.register_next_step_handler(s, encrypt_file)
    elif message.text == '‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°':
        s = bot.send_message(message.chat.id, "‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡∏à‡πâ‡∏≤ ‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏´‡πâ", reply_markup=hd)
        bot.register_next_step_handler(s, decrypt_file)
    elif message.text == '‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏ü‡∏•‡πå':
        s = bot.send_message(message.chat.id, "‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡∏à‡πâ‡∏≤ ‡∏à‡∏∞‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏´‡πâ", reply_markup=hd)
        bot.register_next_step_handler(s, decrypt_file)
    elif message.text == '‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°':
        s = bot.send_message(message.chat.id, "‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡∏à‡πâ‡∏≤ ‡∏à‡∏∞‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏´‡πâ", reply_markup=hd)
        bot.register_next_step_handler(s, decrypt_file)
    elif message.text == '‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö':
        s = bot.send_message(message.chat.id, '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏≠‡πà‡∏¢', reply_markup=hmk)
        bot.register_next_step_handler(s, help_next_step)
    elif message.text == '‡πÑ‡∏°‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤':
        s = bot.send_message(message.chat.id, '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏≠‡πà‡∏¢', reply_markup=hmk)
        bot.register_next_step_handler(s, help_next_step)
    else:
        s = bot.send_message(message.chat.id, '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', reply_markup=hmk)
        bot.register_next_step_handler(s, help_next_step)

def encrypt_file(message):
    if message.document:
        bot.send_message(message.chat.id, "‡∏£‡∏≠‡πÅ‡∏õ‡πä‡∏ö‡∏ô‡∏∂‡∏á ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏ü‡∏•‡πå...")
        file = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file.file_path)
        nf = message.document.file_name
        ps = "@ewg1#ec@fewp_gewaa"
        with open(nf, 'wb') as new_file:
            new_file.write(downloaded_file)
        pyAesCrypt.encryptFile(nf, nf+".katies", ps)
        os.remove(nf)
        bot.send_message(message.chat.id, '‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢')
        bot.send_document(message.chat.id, open(nf+".katies", 'rb'), caption='‡∏ô‡∏µ‡πà‡∏à‡πâ‡∏≤ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡πâ‡∏ß')
        os.remove(nf+".katies")
        ko = types.ReplyKeyboardMarkup()
        ko.add('‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°', '‡πÑ‡∏°‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤')
        s = bot.send_message(message.chat.id, '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏µ‡∏Å‡∏°‡∏±‡πâ‡∏¢', reply_markup=ko)
        bot.register_next_step_handler(s, encrypt_step)
    else:
        ch = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
        ch.add('‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏ü‡∏•‡πå', '‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏ü‡∏•‡πå', '‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö')
        s = bot.send_message(message.chat.id, "‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞‡∏à‡πä‡∏∞", reply_markup=ch)
        bot.register_next_step_handler(s, encrypt_step)

def decrypt_file(message):
    if message.document:
        bot.send_message(message.chat.id, "‡∏£‡∏≠‡πÅ‡∏õ‡πä‡∏ö‡∏ô‡∏∂‡∏á ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏ü‡∏•‡πå...")
        file = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file.file_path)
        nf = message.document.file_name
        ps = "@ewg1#ec@fewp_gewaa"
        with open(nf, 'wb') as new_file:
            new_file.write(downloaded_file)
        spl = os.path.splitext(nf)
        f_name = spl[0]
        pyAesCrypt.decryptFile(nf, f_name, ps)
        os.remove(nf)
        bot.send_message(message.chat.id, '‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢')
        bot.send_document(message.chat.id, open(f_name, 'rb'), caption='‡∏ô‡∏µ‡πà‡∏à‡πâ‡∏≤ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡πâ‡∏ß')
        os.remove(f_name)
        ko = types.ReplyKeyboardMarkup()
        ko.add('‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°', '‡πÑ‡∏°‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤')
        s = bot.send_message(message.chat.id, '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏µ‡∏Å‡∏°‡∏±‡πâ‡∏¢', reply_markup=ko)
        bot.register_next_step_handler(s, encrypt_step)
    else:
        ch = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
        ch.add('‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏ü‡∏•‡πå', '‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏ü‡∏•‡πå', '‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö')
        s = bot.send_message(message.chat.id, "‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞‡∏à‡πä‡∏∞", reply_markup=ch)
        bot.register_next_step_handler(s, encrypt_step)

def unlock_step(message):
    if message.text == 'ADB Driver':
        a = bot.send_message(message.chat.id, dp.adbin, parse_mode='HTML')
        bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
        bot.register_next_step_handler(a, unlock_step)
    elif message.text == '‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå':
        lk = types.InlineKeyboardMarkup()
        l1 = types.InlineKeyboardButton('ADB Driver', url='google.com')
        l2 = types.InlineKeyboardButton('Mi Flash Unlock', url='google.com')
        lk.add(l1, l2)
        a = bot.send_message(message.chat.id, '‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏°‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå', reply_markup=lk, parse_mode='HTML')
        bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
        bot.register_next_step_handler(a, unlock_step)
    elif message.text == '‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á':
        a = bot.send_message(message.chat.id, dp.unlock, parse_mode='HTML')
        bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
        bot.register_next_step_handler(a, unlock_step)
    elif message.text == '‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö':
        a = bot.send_message(message.chat.id, '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏≠‡πà‡∏¢', reply_markup=hmk)
        bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
        bot.register_next_step_handler(a, help_next_step)
    else:
        a = bot.send_message(message.chat.id, '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', reply_markup=hmk)
        bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
        bot.register_next_step_handler(a, help_next_step)

def report(message : types.Message):
    mkup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    mkup.add('‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°', '‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å')
    bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n\n<b>Report to developer\n: </b>" + message.text , parse_mode='HTML')
    if "‡∏Ñ‡∏ß‡∏¢" in message.text:
        f = bot.send_message(message.chat.id, '‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏∏‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞‡∏à‡πä‡∏∞', reply_markup=mkup)
        bot.register_next_step_handler(f, report1)
    elif "‡πÅ‡∏°‡∏ß" in message.text:
        ae = bot.send_message(message.chat.id, "‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡πÄ‡∏≠‡∏≤‡πÅ‡∏°‡∏ß‡πÑ‡∏õ‡∏õ‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£!")
        bot.register_next_step_handler(ae, report1)
    else:
        fe = bot.send_message(message.chat.id, "‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", reply_markup=mkup)
        bot.register_next_step_handler(fe, report1)

def report1(message : types.Message):
    if message.text == '‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°':
        a = bot.send_message(message.chat.id, '‡∏ß‡πà‡∏≤‡∏°‡∏≤‡πÄ‡∏•‡∏¢‡∏¢')
        bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
        bot.register_next_step_handler(a, report)
    elif message.text == '‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å':
        a = bot.send_message(message.chat.id, '‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!', reply_markup=hmk)
        bot.register_next_step_handler(a, help_next_step)
    else:
        a = bot.send_message(message.chat.id, "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", reply_markup=hmk)
        bot.register_next_step_handler(a, help_next_step)

def bank_photo(message):
    if message.text == 'SCB':
        d = bot.send_photo(message.chat.id, photo=open('photo/SCB.jpg', 'rb'))
        bot.register_next_step_handler(d, bank_photo)
    elif message.text == 'K Plus':
        p = bot.send_photo(message.chat.id, photo=open('photo/Kplus.jpg', 'rb'))
        bot.register_next_step_handler(p, bank_photo)
    elif message.text == 'ShopeePay':
        vy = bot.send_photo(message.chat.id, photo=open('photo/Shp.jpg', 'rb'))
        bot.register_next_step_handler(vy, bank_photo)
    elif message.text == 'True Wallet(1)':
        xy = bot.send_photo(message.chat.id, photo=open('photo/mnt.jpg', 'rb'))
        bot.register_next_step_handler(xy, bank_photo)
    elif message.text == 'True Wallet(2)':
        swed = bot.send_photo(message.chat.id, photo=open('photo/mnt.jpg', 'rb'))
        bot.register_next_step_handler(swed, bank_photo)
    elif message.text == '‚ùå Exit ‚ùå':
        c = bot.send_message(message.chat.id, 'Done!', reply_markup=hmk)
        bot.register_next_step_handler(c, help_next_step)
    elif message.text == '‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô':
        c = bot.send_message(message.chat.id, 'Done!', reply_markup=hmk)
        bot.register_next_step_handler(c, help_next_step)
    else:
        ex = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        ex.add('‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô')
        bot.send_message(message.chat.id, '‡∏ß‡πâ‡∏≤‡∏≤ ‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
        bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
        u = bot.send_message(message.chat.id, '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å‡∏°‡∏±‡πâ‡∏¢', reply_markup=ex)
        bot.register_next_step_handler(u, bank_photo)
    logging.basicConfig(filename='user.log', encoding='utf-8', format='%(asctime)s %(message)s', datefmt='%d/%m/%Y %I:%M:%S %p')
    logging.warning((message.from_user.first_name, message.text))
    print(message.from_user.first_name, " : ", message.text)

class uprom_setup:
    def uprom(message):
        if message.text == '‡∏ñ‡∏±‡∏î‡πÑ‡∏õ':
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=False,resize_keyboard=True)
            markup.add('‡∏ñ‡∏±‡∏î‡πÑ‡∏õ')
            a = bot.send_photo(message.chat.id, caption=dp.upfirst, photo=open('photo/srec.png', 'rb'), parse_mode='HTML', reply_markup=markup)
            bot.register_next_step_handler(a, uprom_setup.uprom1)
        elif message.text == '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å':
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=False,resize_keyboard=True)
            c = bot.send_message(message.chat.id, '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏≠‡πà‡∏¢', reply_markup=hmk)
            bot.register_next_step_handler(c, help_next_step)
        else:
            bot.reply_to(message, '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
    def uprom1(message):
        if message.text == '‡∏ñ‡∏±‡∏î‡πÑ‡∏õ':
            a = bot.send_photo(message.chat.id, caption=dp.upfirst1,photo=open('photo/srec2.png', 'rb'), parse_mode='HTML')
            bot.register_next_step_handler(a, uprom_setup.uprom2)
        else:
            bot.reply_to(message, '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
    def uprom2(message):
        if message.text == '‡∏ñ‡∏±‡∏î‡πÑ‡∏õ':
            bot.send_photo(message.chat.id, caption=dp.up_wipe, photo=open('photo/srec3.png', 'rb'), parse_mode='HTML')
            a = bot.send_photo(message.chat.id, caption=dp.up_wipex,photo=open('photo/srec4.png', 'rb'), parse_mode='HTML')
            bot.register_next_step_handler(a, uprom_setup.uprom3)
        else:
            bot.reply_to(message, '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
    def uprom3(message):
        if message.text == '‡∏ñ‡∏±‡∏î‡πÑ‡∏õ':
            a = bot.send_photo(message.chat.id, caption=dp.up_in, photo=open('photo/srec1.png', 'rb'), parse_mode='HTML')
            bot.register_next_step_handler(a, uprom_setup.uprom4)
        else:
            bot.reply_to(message, '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
    def uprom4(message):
        if message.text == '‡∏ñ‡∏±‡∏î‡πÑ‡∏õ':
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
            markup.row_width = 2
            markup.add('‡∏ñ‡∏±‡∏î‡πÑ‡∏õ')
            a = bot.send_photo(message.chat.id, caption=dp.up_in1, photo=open('photo/srec5.png', 'rb'), parse_mode='HTML')
            bot.register_next_step_handler(a, uprom_setup.uprom5)
        else:
            bot.reply_to(message, '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
    def uprom5(message):
        if message.text == '‡∏ñ‡∏±‡∏î‡πÑ‡∏õ':
            a = bot.send_photo(message.chat.id, caption=dp.up_in2, photo=open('photo/srec6.png', 'rb'), parse_mode='HTML')
            bot.register_next_step_handler(a, uprom_setup.uprom6)
        else:
            bot.reply_to(message, '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
    def uprom6(message):
        if message.text == '‡∏ñ‡∏±‡∏î‡πÑ‡∏õ':
            #bot.send_photo(message.chat.id, caption='‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', parse_mode='HTML')
            #a = bot.send_photo(message.chat.id, caption=dp.up_in3, parse_mode='HTML')
            bot.send_message(message.chat.id, '‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ', reply_markup=hmk)
            a = bot.send_message(message.chat.id, dp.up_in3)
            bot.register_next_step_handler(a, help_next_step)
        else:
            bot.reply_to(message, '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')

def note(message : types.Message):
    if message.text == 'mynote':
        bot.delete_message(message.chat.id, message.message_id)
        bt = types.InlineKeyboardMarkup(row_width=2)
        lst = types.InlineKeyboardButton('‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', callback_data='sma')
        lst1 = types.InlineKeyboardButton('‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', callback_data='smd')
        lst2 = types.InlineKeyboardButton('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', callback_data='add')
        lst3 = types.InlineKeyboardButton('‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', callback_data='del')
        lst4 = types.InlineKeyboardButton('‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', callback_data='exit')
        bt.add(lst, lst1, lst2, lst3, lst4)
        bot.send_message(message.chat.id, '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡πâ‡∏≤', reply_markup=bt)
        bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
    else:
        bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
        k = bot.send_message(message.chat.id, "‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏°‡∏µ‡∏Ñ‡∏ô‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ô‡πâ‡∏≤‡∏≤", reply_markup=hmk)
        bot.register_next_step_handler(k, help_next_step)

def mytab(message):
    txt = message.text
    if txt == 'bbo':
        with open('photo/mytab.png', 'rb') as file:
            bot.delete_message(message.chat.id, message.message_id)
            s = bot.send_message(message.chat.id, '‡∏£‡∏´‡∏±‡∏™‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏£‡∏≠‡πÅ‡∏õ‡πä‡∏ö', reply_markup=hmk)
            bot.send_photo(message.chat.id, file)
            bot.register_next_step_handler(s, help_next_step)
            print("---> sent photo to", message.from_user.first_name, "succeed")
    else:
        bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
        c = bot.send_message(message.chat.id, '‡πÉ‡∏™‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏´‡∏£‡∏≠‡∏Å', reply_markup=hmk)
        bot.register_next_step_handler(c, help_next_step)
    logging.basicConfig(filename='user.log', encoding='utf-8', format='%(asctime)s %(message)s', datefmt='%d/%m/%Y %I:%M:%S %p')
    logging.warning((message.from_user.first_name, message.text))
    print(message.from_user.first_name, " : ", message.text)

def help_tr_step(message):
    Help = message.text
    if (Help == 'Help'):
        j = bot.reply_to(message, dp.trhelp, reply_markup=hmk, parse_mode='HTML')
        bot.register_next_step_handler(j, help_next_step)
    else:
        o = bot.send_message(message.chat.id, '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', reply_markup=hmk)
        bot.register_next_step_handler(o, help_next_step)
    logging.basicConfig(filename='user.log', encoding='utf-8', format='%(asctime)s %(message)s', datefmt='%d/%m/%Y %I:%M:%S %p')
    logging.warning((message.from_user.first_name, message.text))
    print(message.from_user.first_name, " : ", message.text)

def stop(message: types.Message):
    global freeid

    if message.chat.id in users:
        txt = message.text
        
    if txt == '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‚úî':
        bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
        bot.send_message(message.chat.id, '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö...', reply_markup=hd)
        bot.send_message(users[message.chat.id], '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡∏¢‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ö‡∏≠‡∏µ‡∏Å‡πÄ‡∏•‡∏¢üòâ')

        del users[users[message.chat.id]]
        del users[message.chat.id]

        print(message.chat.id, "is logout")
        print(users, freeid)
    elif message.chat.id == freeid:
        bot.send_message(message.chat.id, '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö...')
        freeid = None

        print(users, freeid)
    else:
        bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
        bot.send_message(message.chat.id, '‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß üòê', reply_markup=hd)
        logging.basicConfig(filename='user.log', encoding='utf-8', format='%(asctime)s %(message)s', datefmt='%d/%m/%Y %I:%M:%S %p')
        logging.warning((message.from_user.first_name, message.text))
    print(message.from_user.first_name, " : ", message.text)

#-------------------------------- Inline Markup-------------------------------------------#
#-------------------------------- Inline Markup-------------------------------------------#
#-------------------------------- Inline Markup-------------------------------------------#

def next_setup_devices(message):
    txt = message.text
    if (txt == 'vayu'):
        mkup = types.InlineKeyboardMarkup(row_width=2)
        EU = types.InlineKeyboardButton("ROM", callback_data="romva")
        GR = types.InlineKeyboardButton("RECOVER", callback_data="reva")
        GB = types.InlineKeyboardButton("KERNEL", callback_data="kerva")
        Ex = types.InlineKeyboardButton("Exit", callback_data="end")
        mkup.add(EU, GR, GB, Ex)
        text = "<b>Poco X3 Pro</b> - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡πâ‡∏≤"
        bot.send_message(message.chat.id, text, reply_markup=mkup, parse_mode='HTML')
    elif (txt == 'lime'):
        mkup = types.InlineKeyboardMarkup(row_width=2)
        EU = types.InlineKeyboardButton("ROM", callback_data="romli")
        GR = types.InlineKeyboardButton("RECOVER", callback_data="reli")
        GB = types.InlineKeyboardButton("KERNEL", callback_data="kerli")
        Ex = types.InlineKeyboardButton("Exit", callback_data="end")
        #mkup.add(EU, GR, GB, Ex)
        #text = "<b>Redmi 9t/Poco M3</b> - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡πâ‡∏≤"
        text = "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
        #bot.send_message(message.chat.id, text, reply_markup=mkup, parse_mode='HTML')
        bot.send_message(message.chat.id, text)
    elif (txt == 'mojito'):
        mkup = types.InlineKeyboardMarkup(row_width=2)
        A = types.InlineKeyboardButton("ROM", callback_data="rommo")
        B = types.InlineKeyboardButton("RECOVER", callback_data="rec")
        Z = types.InlineKeyboardButton("KERNEL", callback_data="kermo")
        Ex = types.InlineKeyboardButton("Exit", callback_data="end")
        #mkup.add(A, B, Z, Ex)
        #text = "<b>Redmi Note 10</b> - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡πâ‡∏≤"
        text = "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
        #bot.send_message(message.chat.id, text, reply_markup=mkup, parse_mode='HTML')
        bot.send_message(message.chat.id, text)
    elif txt == '‚¨ÖÔ∏è ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö':
        k = bot.send_message(message.chat.id, '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏≠‡πà‡∏¢', reply_markup=hmk)
        bot.register_next_step_handler(k, help_next_step)
    else:
        bot.reply_to(message, '‚ùå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‚ùå')
    logging.basicConfig(filename='user.log', encoding='utf-8', format='%(asctime)s %(message)s', datefmt='%d/%m/%Y %I:%M:%S %p')
    logging.warning((message.from_user.first_name, message.text))
    print(message.from_user.first_name, " : ", message.text)

# ---------------------------------- Poco X3 Pro --------------------------------------------------#
# ---------------------------------- Poco X3 Pro --------------------------------------------------#
# ---------------------------------- Poco X3 Pro --------------------------------------------------#

@bot.callback_query_handler(func=lambda call: call.data == 'romva')
def rom_vayu_se(call):
    if call.message.chat.id in users:
        mkup = types.InlineKeyboardMarkup(row_width=1)
        A = types.InlineKeyboardButton("MIUI", callback_data="MIUI-va")
        B = types.InlineKeyboardButton("Pure Android", callback_data="Pure-va")
        Z = types.InlineKeyboardButton("<<= Back", callback_data="Backva")
        mkup.add(A,B,Z)
        text = "‡∏£‡∏≠‡∏° <b>MIUI</b> ‡∏´‡∏£‡∏∑‡∏≠ <b>Pure Andriod</b> ‡πÄ‡∏≠‡πà‡∏¢"
        bot.edit_message_text( text, call.message.chat.id, call.message.message_id, reply_markup=mkup, parse_mode='HTML')
        bot.answer_callback_query(call.id)
    else:
        bot.edit_message_text('‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏£‡πâ‡∏≤‡∏≤ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏¥‡πâ‡∏° > /auth', call.message.chat.id, call.message.message_id)

#------------------------------------------- MIUI ROM --------------------------------------------------------#
#------------------------------------------- MIUI ROM --------------------------------------------------------#

@bot.callback_query_handler(func=lambda call: call.data == 'MIUI-va')
def rom_vayu_mi(call):
    if call.message.chat.id in users:
        mkup = types.InlineKeyboardMarkup(row_width=1)
        A= types.InlineKeyboardButton("EU", callback_data="EU_va")
        B = types.InlineKeyboardButton("GR", callback_data="GR_va")
        C = types.InlineKeyboardButton("MMX", callback_data="MX_va")
        D = types.InlineKeyboardButton("Global", callback_data="GB_va")
        Z = types.InlineKeyboardButton("<<= Back", callback_data="romva")
        mkup.add(A,B,C,D,Z)
        bot.edit_message_text(dp.x3p, call.message.chat.id, call.message.message_id, reply_markup=mkup, parse_mode='HTML')
        bot.answer_callback_query(call.id)
    else:
        bot.edit_message_text('‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏£‡πâ‡∏≤‡∏≤ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏¥‡πâ‡∏° > /auth', call.message.chat.id, call.message.message_id)

#-------------------------------------------- EU ROM ---------------------------------------------------------#
@bot.callback_query_handler(func=lambda call: call.data == 'EU_va')
def rom_vayu_eu(call):
    if call.message.chat.id in users:
        mkup = types.InlineKeyboardMarkup(row_width=1)
        A = types.InlineKeyboardButton("V12.5.7", url='https://sourceforge.net/projects/xiaomi-eu-multilang-miui-roms/files/xiaomi.eu/MIUI-STABLE-RELEASES/MIUIv12/xiaomi.eu_multi_POCOX3Pro_V12.5.7.0.RJUMIXM_v12-11.zip/download') 
        B = types.InlineKeyboardButton("V12.5.5", url='https://sourceforge.net/projects/xiaomi-eu-multilang-miui-roms/files/xiaomi.eu/MIUI-STABLE-RELEASES/MIUIv12/xiaomi.eu_multi_POCOX3Pro_V12.5.5.0.RJUMIXM_v12-11.zip/download')
        C = types.InlineKeyboardButton("V12.5.4", url='https://sourceforge.net/projects/xiaomi-eu-multilang-miui-roms/files/xiaomi.eu/MIUI-STABLE-RELEASES/MIUIv12/xiaomi.eu_multi_POCOX3Pro_V12.5.4.0.RJUMIXM_v12-11.zip/download')
        D = types.InlineKeyboardButton("V12.5.3", url='https://sourceforge.net/projects/xiaomi-eu-multilang-miui-roms/files/xiaomi.eu/MIUI-STABLE-RELEASES/MIUIv12/xiaomi.eu_multi_POCOX3Pro_V12.5.3.0.RJUMIXM_v12-11.zip/download')
        E = types.InlineKeyboardButton("V12.5.2", url='https://sourceforge.net/projects/xiaomi-eu-multilang-miui-roms/files/xiaomi.eu/MIUI-STABLE-RELEASES/MIUIv12/xiaomi.eu_multi_POCOX3Pro_V12.5.2.0.RJUMIXM_v12-11.zip/download')
        F = types.InlineKeyboardButton("V12.5.1", url='https://sourceforge.net/projects/xiaomi-eu-multilang-miui-roms/files/xiaomi.eu/MIUI-STABLE-RELEASES/MIUIv12/xiaomi.eu_multi_POCOX3Pro_V12.5.1.0.RJUMIXM_v12-11.zip/download')
        G = types.InlineKeyboardButton("V12.0.6", url='https://sourceforge.net/projects/xiaomi-eu-multilang-miui-roms/files/xiaomi.eu/MIUI-STABLE-RELEASES/MIUIv12/xiaomi.eu_multi_POCOX3Pro_V12.0.6.0.RJUMIXM_v12-11.zip/download')
        H = types.InlineKeyboardButton("V12.0.4", url='https://sourceforge.net/projects/xiaomi-eu-multilang-miui-roms/files/xiaomi.eu/MIUI-STABLE-RELEASES/MIUIv12/xiaomi.eu_multi_POCOX3Pro_V12.0.4.0.RJUMIXM_v12-11.zip/download')
        Z = types.InlineKeyboardButton("<<= Back", callback_data="MIUI-va")
        mkup.add(A, B, C, D, E, F, G, H, Z)
        bot.edit_message_text(dp.x3peu, call.message.chat.id, call.message.message_id, reply_markup=mkup, parse_mode='HTML')
        bot.answer_callback_query(call.id)
    else:
        bot.edit_message_text('‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏£‡πâ‡∏≤‡∏≤ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏¥‡πâ‡∏° > /auth', call.message.chat.id, call.message.message_id)
#-------------------------------------------- GR ROM ---------------------------------------------------------#
@bot.callback_query_handler(func=lambda call: call.data == 'GR_va')
def rom_vayu_gr(call):
    if call.message.chat.id in users:
        mkup = types.InlineKeyboardMarkup(row_width=1)
        A = types.InlineKeyboardButton("V12.5.7", url='google.com') 
        B = types.InlineKeyboardButton("V12.5.5", url='google.com')
        C = types.InlineKeyboardButton("V12.5.4", url='google.com')
        D = types.InlineKeyboardButton("V12.5.3", url='google.com')
        E = types.InlineKeyboardButton("V12.5.2", url='google.com')
        F = types.InlineKeyboardButton("V12.5.1", url='google.com')
        G = types.InlineKeyboardButton("V12.0.6", url='google.com')
        H = types.InlineKeyboardButton("V12.0.4", url='google.com')
        Z = types.InlineKeyboardButton("<<= Back", callback_data="MIUI-va")
        mkup.add(A, B, C, D, E, F, G, H, Z)
        text = (
        "<b>------------     Poco X3 Pro     ------------</b>\n"
        "       <b>----------   GR ROM   ----------</b>\n\n"

        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏¢ üòâ"
        )
        bot.edit_message_text( text, call.message.chat.id, call.message.message_id, reply_markup=mkup, parse_mode='HTML')
        bot.answer_callback_query(call.id)
    else:
        bot.edit_message_text('‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏£‡πâ‡∏≤‡∏≤ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏¥‡πâ‡∏° > /auth', call.message.chat.id, call.message.message_id)
#----------------------------------------- MMX MIUI -------------------------------------------------------------#
@bot.callback_query_handler(func=lambda call: call.data == 'MX_va')
def rom_vayu_mx(call):
    if call.message.chat.id in users:
        mkup = types.InlineKeyboardMarkup(row_width=1)
        A = types.InlineKeyboardButton("V12.5.7", url='https://androidfilehost.com/?fid=7161016148664849871') 
        B = types.InlineKeyboardButton("V12.5.5", url='https://androidfilehost.com/?fid=7161016148664825201')
        C = types.InlineKeyboardButton("V12.5.4", url='https://androidfilehost.com/?fid=7161016148664797557')
        D = types.InlineKeyboardButton("V12.5.3", url='https://androidfilehost.com/?fid=7161016148664782181')
        E = types.InlineKeyboardButton("V12.5.2", url='https://androidfilehost.com/?fid=14943124697586352735')
        F = types.InlineKeyboardButton("V12.5.1", url='https://androidfilehost.com/?fid=14943124697586345571')
        G = types.InlineKeyboardButton("V12.0.6", url='https://androidfilehost.com/?fid=2188818919693787302')
        H = types.InlineKeyboardButton("V12.0.4", url='https://androidfilehost.com/?fid=2188818919693784819')
        Z = types.InlineKeyboardButton("<<= Back", callback_data="MIUI-va")
        mkup.add(A, B, C, D, E, F, G, H, Z)
        text = (
        "<b>------------     Poco X3 Pro     ------------</b>\n"
        "       <b>----------   MMX ROM   ----------</b>\n\n"

        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏¢ üòâ"
        )
        bot.edit_message_text( text, call.message.chat.id, call.message.message_id, reply_markup=mkup, parse_mode='HTML')
        bot.answer_callback_query(call.id)
    else:
        bot.edit_message_text('‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏£‡πâ‡∏≤‡∏≤ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏¥‡πâ‡∏° > /auth', call.message.chat.id, call.message.message_id)
#-------------------------------------------- GB ROM ---------------------------------------------------------#
@bot.callback_query_handler(func=lambda call: call.data == 'GB_va')
def rom_vayu_gb(call):
    if call.message.chat.id in users:
        mkup = types.InlineKeyboardMarkup(row_width=1) 
        A = types.InlineKeyboardButton("V12.5.5", url='https://mifirm.net/download/5854')
        B = types.InlineKeyboardButton("V12.5.4", url='https://mifirm.net/download/5667')
        C = types.InlineKeyboardButton("V12.5.3", url='https://mifirm.net/download/5581')
        D = types.InlineKeyboardButton("V12.5.2", url='https://mifirm.net/download/5346')
        E = types.InlineKeyboardButton("V12.0.6", url='https://mifirm.net/download/5105')
        F = types.InlineKeyboardButton("V12.0.4", url='https://mifirm.net/download/4922')
        Z = types.InlineKeyboardButton("<<= Back", callback_data="MIUI-va")
        mkup.add(A, B, C, D, E, F, Z)
        text = (
        "<b>------------     Poco X3 Pro     ------------</b>\n"
        "       <b>---------   Global ROM   ---------</b>\n\n"

        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏¢ üòâ"
        )
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=mkup, parse_mode='HTML')
        bot.answer_callback_query(call.id)
    else:
        bot.edit_message_text('‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏£‡πâ‡∏≤‡∏≤ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏¥‡πâ‡∏° > /auth', call.message.chat.id, call.message.message_id)

#------------------------------------------- Pure ROM --------------------------------------------------------#
#------------------------------------------- Pure ROM --------------------------------------------------------#
@bot.callback_query_handler(func=lambda call: call.data == 'Pure-va')
def rom_vayu_aso(call):
    if call.message.chat.id in users:
        mkup = types.InlineKeyboardMarkup(row_width=1)
        A= types.InlineKeyboardButton("OFFICIAL", callback_data="OF_va")
        B = types.InlineKeyboardButton("UNOFFICIAL", callback_data="UOF_va")
        Z = types.InlineKeyboardButton("<<= Back", callback_data="romva")
        mkup.add(A,B,Z)
        text = (
        "<b>------------     Poco X3 Pro     ------------</b>\n\n"
        "     <b>---------   Pure Andriod   ---------</b>"
        )
        bot.edit_message_text( text, call.message.chat.id, call.message.message_id, reply_markup=mkup, parse_mode='HTML')
        bot.answer_callback_query(call.id)
    else:
        bot.edit_message_text('‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏£‡πâ‡∏≤‡∏≤ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏¥‡πâ‡∏° > /auth', call.message.chat.id, call.message.message_id)

#------------------------------------------ Official -------------------------------------------------------#
@bot.callback_query_handler(func=lambda call: call.data == 'OF_va')
def rom_vayu_ofi(call):
    if call.message.chat.id in users:
        mkup = types.InlineKeyboardMarkup(row_width=1)
        A = types.InlineKeyboardButton("AncientOS", url='https://www.pling.com/p/1606146')
        B = types.InlineKeyboardButton("AICP v16.1 A11 Vanilla", url='https://dwnld.aicp-rom.com/device/vayu/WEEKLY/aicp_vayu_r-16.1-WEEKLY-20211203.zip')
        C = types.InlineKeyboardButton("ArrowOS", url='https://arrowos.net/download/vayu')
        D = types.InlineKeyboardButton("Derpfest A12 Gapps", url='https://sourceforge.net/projects/derpfest/files/vayu/DerpFest-12-Official-Shion-vayu-20211203.zip/download')
        E = types.InlineKeyboardButton("DotOS v5.2.1 A11",url='https://www.droidontime.com/devices/vayu')
        G = types.InlineKeyboardButton("LineageOs v18.1 A11 Vanilla", url='https://mirrorbits.lineageos.org/full/vayu/20211203/lineage-18.1-20211203-nightly-vayu-signed.zip')
        H = types.InlineKeyboardButton("Pixel Ex Beta A12 Gapps", url='https://download.pixelexperience.org/vayu')
        I = types.InlineKeyboardButton("XPerience v16.0 A12", url='https://sourceforge.net/projects/xperience-aosp/files/vayu/16/nightly/xperience-16.0.0-20211202-NIGHTLY-vayu.zip/download')
        Z = types.InlineKeyboardButton("<<= Back", callback_data="Pure-va")
        mkup.add(A,B,C,D,E,G,H,I,Z)
        text = (
        "<b>------------     Poco X3 Pro     ------------</b>\n"
        "    <b>--------   Pure Andriod   --------</b>\n"
        "      <b>----------   Officail   ----------</b>"
        )
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=mkup, parse_mode='HTML')
        bot.answer_callback_query(call.id)
    else:
        bot.edit_message_text('‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏£‡πâ‡∏≤‡∏≤ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏¥‡πâ‡∏° > /auth', call.message.chat.id, call.message.message_id)

#------------------------------------------ UnOfficial -------------------------------------------------------#
@bot.callback_query_handler(func=lambda call: call.data == 'UOF_va')
def rom_vayu_unofi(call):
    if call.message.chat.id in users:
        mkup = types.InlineKeyboardMarkup(row_width=1)
        J = types.InlineKeyboardButton("CipherOS v2.0 A12 Gapps", url='https://drive.google.com/file/d/1y5ZLxzIzDrG_uFABibI_4CTThGZsdeEO/view')
        F = types.InlineKeyboardButton("EVO 6.0 A12 Gapps", url='https://sourceforge.net/projects/gengkapak/files/ROM/vayu/EvolutionX/12/evolution_vayu-ota-sd1a.210817.036.a8-11300236-unofficial-unsigned.zip/download')
        G = types.InlineKeyboardButton("LineageOs v19.0 A12 Vanilla", url='https://sourceforge.net/projects/other007/files/lineage-19.0-20211207-UNOFFICIAL-vayu.zip/download')
        Z = types.InlineKeyboardButton("<<= Back", callback_data="Pure-va")
        mkup.add(F,G,J,Z)
        text = (
        "<b>------------     Poco X3 Pro     ------------</b>\n"
        "    <b>--------   Pure Andriod   --------</b>\n"
        "      <b>----------   Unofficail   ----------</b>"
        )
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=mkup, parse_mode='HTML')
        bot.answer_callback_query(call.id)
    else:
        bot.edit_message_text('‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏£‡πâ‡∏≤‡∏≤ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏¥‡πâ‡∏° > /auth', call.message.chat.id, call.message.message_id)

#------------------------------------------ Recovery -------------------------------------------------------#
#------------------------------------------ Recovery -------------------------------------------------------#
@bot.callback_query_handler(func=lambda call: call.data == 'reva')
def rom_vayu_rec(call):
    if call.message.chat.id in users:
        mkup = types.InlineKeyboardMarkup(row_width=1)
        A= types.InlineKeyboardButton("TWRP", url='https://dl.twrp.me/vayu/twrp-3.6.0_11-0-vayu.img')
        B = types.InlineKeyboardButton("Orange Fox", url='https://us-dl.orangefox.download/61925ad3df607d814a41854e')
        Z = types.InlineKeyboardButton("<<= Back", callback_data="Backva")
        mkup.add(A,B,Z)
        text = (
            "<b>------------     Poco X3 Pro     ------------</b>\n"
            "       <b>------------  Recovery  ------------</b>     "
        )
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=mkup, parse_mode='HTML')
        bot.answer_callback_query(call.id)
    else:
        bot.edit_message_text('‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏£‡πâ‡∏≤‡∏≤ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏¥‡πâ‡∏° > /auth', call.message.chat.id, call.message.message_id)
#------------------------------------------ Kernels -------------------------------------------------------#
#------------------------------------------ Kernels -------------------------------------------------------#
@bot.callback_query_handler(func=lambda call: call.data == 'kerva')
def rom_vayu_rec(call):
    if call.message.chat.id in users:
        mkup = types.InlineKeyboardMarkup(row_width=1)
        Z = types.InlineKeyboardButton("<<= Back", callback_data="Backva")
        mkup.add(Z)
        text = (
            "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï"
        )
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=mkup, parse_mode='HTML')
        bot.answer_callback_query(call.id)
    else:
        bot.edit_message_text('‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏£‡πâ‡∏≤‡∏≤ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏¥‡πâ‡∏° > /auth', call.message.chat.id, call.message.message_id)

# ---------------------------------- Redmi 9t --------------------------------------------------#
# ---------------------------------- Redmi 9t --------------------------------------------------#
# ---------------------------------- Redmi 9t --------------------------------------------------#

@bot.callback_query_handler(func=lambda call: call.data == 'romli')
def rom_vayu_se(call):
    if call.message.chat.id in users:
        mkup = types.InlineKeyboardMarkup(row_width=1)
        A = types.InlineKeyboardButton("MIUI", callback_data="MIUI-li")
        B = types.InlineKeyboardButton("Pure Android", callback_data="Pure-li")
        Z = types.InlineKeyboardButton("<<= Back", callback_data="Backli")
        mkup.add(Z)
        text = "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï"
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=mkup, parse_mode='HTML')
        bot.answer_callback_query(call.id)
    else:
        bot.edit_message_text('‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏£‡πâ‡∏≤‡∏≤ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏¥‡πâ‡∏° > /auth', call.message.chat.id, call.message.message_id)

#------------------------------------------- MIUI ROM --------------------------------------------------------#
#------------------------------------------- MIUI ROM --------------------------------------------------------#

@bot.callback_query_handler(func=lambda call: call.data == 'MIUI-li')
def rom_vayu_mi(call):
    if call.message.chat.id in users:
        mkup = types.InlineKeyboardMarkup(row_width=1)
        A= types.InlineKeyboardButton("EU", callback_data="EU_li")
        B = types.InlineKeyboardButton("GR", callback_data="GR_li")
        C = types.InlineKeyboardButton("MMX", callback_data="MX_li")
        D = types.InlineKeyboardButton("Global", callback_data="GB_li")
        Z = types.InlineKeyboardButton("<<= Back", callback_data="romli")
        mkup.add(A,B,C,D,Z)
        text = (
            "Redmi 9t"
        )
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=mkup, parse_mode='HTML')
        bot.answer_callback_query(call.id)
    else:
        bot.edit_message_text('‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏£‡πâ‡∏≤‡∏≤ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏¥‡πâ‡∏° > /auth', call.message.chat.id, call.message.message_id)

#-------------------------------------------- EU ROM ---------------------------------------------------------#
@bot.callback_query_handler(func=lambda call: call.data == 'EU_li')
def rom_vayu_eu(call):
    if call.message.chat.id in users:
        mkup = types.InlineKeyboardMarkup(row_width=1)
        A = types.InlineKeyboardButton("V12.5.7", url='https://sourceforge.net/projects/xiaomi-eu-multilang-miui-roms/files/xiaomi.eu/MIUI-STABLE-RELEASES/MIUIv12/xiaomi.eu_multi_POCOX3Pro_V12.5.7.0.RJUMIXM_v12-11.zip/download') 
        B = types.InlineKeyboardButton("V12.5.5", url='https://sourceforge.net/projects/xiaomi-eu-multilang-miui-roms/files/xiaomi.eu/MIUI-STABLE-RELEASES/MIUIv12/xiaomi.eu_multi_POCOX3Pro_V12.5.5.0.RJUMIXM_v12-11.zip/download')
        C = types.InlineKeyboardButton("V12.5.4", url='https://sourceforge.net/projects/xiaomi-eu-multilang-miui-roms/files/xiaomi.eu/MIUI-STABLE-RELEASES/MIUIv12/xiaomi.eu_multi_POCOX3Pro_V12.5.4.0.RJUMIXM_v12-11.zip/download')
        D = types.InlineKeyboardButton("V12.5.3", url='https://sourceforge.net/projects/xiaomi-eu-multilang-miui-roms/files/xiaomi.eu/MIUI-STABLE-RELEASES/MIUIv12/xiaomi.eu_multi_POCOX3Pro_V12.5.3.0.RJUMIXM_v12-11.zip/download')
        E = types.InlineKeyboardButton("V12.5.2", url='https://sourceforge.net/projects/xiaomi-eu-multilang-miui-roms/files/xiaomi.eu/MIUI-STABLE-RELEASES/MIUIv12/xiaomi.eu_multi_POCOX3Pro_V12.5.2.0.RJUMIXM_v12-11.zip/download')
        F = types.InlineKeyboardButton("V12.5.1", url='https://sourceforge.net/projects/xiaomi-eu-multilang-miui-roms/files/xiaomi.eu/MIUI-STABLE-RELEASES/MIUIv12/xiaomi.eu_multi_POCOX3Pro_V12.5.1.0.RJUMIXM_v12-11.zip/download')
        G = types.InlineKeyboardButton("V12.0.6", url='https://sourceforge.net/projects/xiaomi-eu-multilang-miui-roms/files/xiaomi.eu/MIUI-STABLE-RELEASES/MIUIv12/xiaomi.eu_multi_POCOX3Pro_V12.0.6.0.RJUMIXM_v12-11.zip/download')
        H = types.InlineKeyboardButton("V12.0.4", url='https://sourceforge.net/projects/xiaomi-eu-multilang-miui-roms/files/xiaomi.eu/MIUI-STABLE-RELEASES/MIUIv12/xiaomi.eu_multi_POCOX3Pro_V12.0.4.0.RJUMIXM_v12-11.zip/download')
        Z = types.InlineKeyboardButton("<<= Back", callback_data="MIUI-li")
        #mkup.add(A, B, C, D, E, F, G, H, Z)
        mkup.add(Z)
        bot.edit_message_text("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï", call.message.chat.id, call.message.message_id, reply_markup=mkup, parse_mode='HTML')
        bot.answer_callback_query(call.id)
    else:
        bot.edit_message_text('‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏£‡πâ‡∏≤‡∏≤ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏¥‡πâ‡∏° > /auth', call.message.chat.id, call.message.message_id)
#-------------------------------------------- GR ROM ---------------------------------------------------------#
@bot.callback_query_handler(func=lambda call: call.data == 'GR_li')
def rom_vayu_gr(call):
    if call.message.chat.id in users:
        mkup = types.InlineKeyboardMarkup(row_width=1)
        A = types.InlineKeyboardButton("V12.5.7", url='google.com') 
        B = types.InlineKeyboardButton("V12.5.5", url='google.com')
        C = types.InlineKeyboardButton("V12.5.4", url='google.com')
        D = types.InlineKeyboardButton("V12.5.3", url='google.com')
        E = types.InlineKeyboardButton("V12.5.2", url='google.com')
        F = types.InlineKeyboardButton("V12.5.1", url='google.com')
        G = types.InlineKeyboardButton("V12.0.6", url='google.com')
        H = types.InlineKeyboardButton("V12.0.4", url='google.com')
        Z = types.InlineKeyboardButton("<<= Back", callback_data="MIUI-va")
        mkup.add(A, B, C, D, E, F, G, H, Z)
        text = (
        "<b>------------     Poco X3 Pro     ------------</b>\n"
        "       <b>----------   GR ROM   ----------</b>\n\n"

        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏¢ üòâ"
        )
        bot.edit_message_text( text, call.message.chat.id, call.message.message_id, reply_markup=mkup, parse_mode='HTML')
        bot.answer_callback_query(call.id)
    else:
        bot.edit_message_text('‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏£‡πâ‡∏≤‡∏≤ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏¥‡πâ‡∏° > /auth', call.message.chat.id, call.message.message_id)
#----------------------------------------- MMX MIUI -------------------------------------------------------------#
@bot.callback_query_handler(func=lambda call: call.data == 'MX_li')
def rom_vayu_mx(call):
    if call.message.chat.id in users:
        mkup = types.InlineKeyboardMarkup(row_width=1)
        A = types.InlineKeyboardButton("V12.5.7", url='https://androidfilehost.com/?fid=7161016148664849871') 
        B = types.InlineKeyboardButton("V12.5.5", url='https://androidfilehost.com/?fid=7161016148664825201')
        C = types.InlineKeyboardButton("V12.5.4", url='https://androidfilehost.com/?fid=7161016148664797557')
        D = types.InlineKeyboardButton("V12.5.3", url='https://androidfilehost.com/?fid=7161016148664782181')
        E = types.InlineKeyboardButton("V12.5.2", url='https://androidfilehost.com/?fid=14943124697586352735')
        F = types.InlineKeyboardButton("V12.5.1", url='https://androidfilehost.com/?fid=14943124697586345571')
        G = types.InlineKeyboardButton("V12.0.6", url='https://androidfilehost.com/?fid=2188818919693787302')
        H = types.InlineKeyboardButton("V12.0.4", url='https://androidfilehost.com/?fid=2188818919693784819')
        Z = types.InlineKeyboardButton("<<= Back", callback_data="MIUI-va")
        mkup.add(A, B, C, D, E, F, G, H, Z)
        text = (
        "<b>------------     Poco X3 Pro     ------------</b>\n"
        "       <b>----------   MMX ROM   ----------</b>\n\n"

        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏¢ üòâ"
        )
        bot.edit_message_text( text, call.message.chat.id, call.message.message_id, reply_markup=mkup, parse_mode='HTML')
        bot.answer_callback_query(call.id)
    else:
        bot.edit_message_text('‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏£‡πâ‡∏≤‡∏≤ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏¥‡πâ‡∏° > /auth', call.message.chat.id, call.message.message_id)
#-------------------------------------------- GB ROM ---------------------------------------------------------#
@bot.callback_query_handler(func=lambda call: call.data == 'GB_li')
def rom_vayu_gb(call):
    if call.message.chat.id in users:
        mkup = types.InlineKeyboardMarkup(row_width=1) 
        A = types.InlineKeyboardButton("V12.5.5", url='https://mifirm.net/download/5854')
        B = types.InlineKeyboardButton("V12.5.4", url='https://mifirm.net/download/5667')
        C = types.InlineKeyboardButton("V12.5.3", url='https://mifirm.net/download/5581')
        D = types.InlineKeyboardButton("V12.5.2", url='https://mifirm.net/download/5346')
        E = types.InlineKeyboardButton("V12.0.6", url='https://mifirm.net/download/5105')
        F = types.InlineKeyboardButton("V12.0.4", url='https://mifirm.net/download/4922')
        Z = types.InlineKeyboardButton("<<= Back", callback_data="MIUI-va")
        mkup.add(A, B, C, D, E, F, Z)
        text = (
        "<b>------------     Poco X3 Pro     ------------</b>\n"
        "       <b>---------   Global ROM   ---------</b>\n\n"

        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏¢ üòâ"
        )
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=mkup, parse_mode='HTML')
        bot.answer_callback_query(call.id)
    else:
        bot.edit_message_text('‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏£‡πâ‡∏≤‡∏≤ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏¥‡πâ‡∏° > /auth', call.message.chat.id, call.message.message_id)

#------------------------------------------- Pure ROM --------------------------------------------------------#
#------------------------------------------- Pure ROM --------------------------------------------------------#
@bot.callback_query_handler(func=lambda call: call.data == 'Pure-li')
def rom_vayu_aso(call):
    if call.message.chat.id in users:
        mkup = types.InlineKeyboardMarkup(row_width=1)
        A= types.InlineKeyboardButton("OFFICIAL", callback_data="OF_va")
        B = types.InlineKeyboardButton("UNOFFICIAL", callback_data="UOF_va")
        Z = types.InlineKeyboardButton("<<= Back", callback_data="romva")
        mkup.add(A,B,Z)
        text = (
        "<b>------------     Poco X3 Pro     ------------</b>\n\n"
        "     <b>---------   Pure Andriod   ---------</b>"
        )
        bot.edit_message_text( text, call.message.chat.id, call.message.message_id, reply_markup=mkup, parse_mode='HTML')
        bot.answer_callback_query(call.id)
    else:
        bot.edit_message_text('‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏£‡πâ‡∏≤‡∏≤ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏¥‡πâ‡∏° > /auth', call.message.chat.id, call.message.message_id)

#------------------------------------------ Official -------------------------------------------------------#
@bot.callback_query_handler(func=lambda call: call.data == 'OF_li')
def rom_vayu_ofi(call):
    if call.message.chat.id in users:
        mkup = types.InlineKeyboardMarkup(row_width=1)
        A = types.InlineKeyboardButton("AncientOS", url='https://www.pling.com/p/1606146')
        B = types.InlineKeyboardButton("AICP v16.1 A11 Vanilla", url='https://dwnld.aicp-rom.com/device/vayu/WEEKLY/aicp_vayu_r-16.1-WEEKLY-20211203.zip')
        C = types.InlineKeyboardButton("ArrowOS", url='https://arrowos.net/download/vayu')
        D = types.InlineKeyboardButton("Derpfest A12 Gapps", url='https://sourceforge.net/projects/derpfest/files/vayu/DerpFest-12-Official-Shion-vayu-20211203.zip/download')
        E = types.InlineKeyboardButton("DotOS v5.2.1 A11",url='https://www.droidontime.com/devices/vayu')
        G = types.InlineKeyboardButton("LineageOs v18.1 A11 Vanilla", url='https://mirrorbits.lineageos.org/full/vayu/20211203/lineage-18.1-20211203-nightly-vayu-signed.zip')
        H = types.InlineKeyboardButton("Pixel Ex Beta A12 Gapps", url='https://download.pixelexperience.org/vayu')
        I = types.InlineKeyboardButton("XPerience v16.0 A12", url='https://sourceforge.net/projects/xperience-aosp/files/vayu/16/nightly/xperience-16.0.0-20211202-NIGHTLY-vayu.zip/download')
        Z = types.InlineKeyboardButton("<<= Back", callback_data="Pure-va")
        mkup.add(A,B,C,D,E,G,H,I,Z)
        text = (
        "<b>------------     Poco X3 Pro     ------------</b>\n"
        "    <b>--------   Pure Andriod   --------</b>\n"
        "      <b>----------   Officail   ----------</b>"
        )
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=mkup, parse_mode='HTML')
        bot.answer_callback_query(call.id)
    else:
        bot.edit_message_text('‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏£‡πâ‡∏≤‡∏≤ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏¥‡πâ‡∏° > /auth', call.message.chat.id, call.message.message_id)

#------------------------------------------ UnOfficial -------------------------------------------------------#
@bot.callback_query_handler(func=lambda call: call.data == 'UOF_li')
def rom_vayu_unofi(call):
    if call.message.chat.id in users:
        mkup = types.InlineKeyboardMarkup(row_width=1)
        J = types.InlineKeyboardButton("CipherOS v2.0 A12 Gapps", url='https://drive.google.com/file/d/1y5ZLxzIzDrG_uFABibI_4CTThGZsdeEO/view')
        F = types.InlineKeyboardButton("EVO 6.0 A12 Gapps", url='https://sourceforge.net/projects/gengkapak/files/ROM/vayu/EvolutionX/12/evolution_vayu-ota-sd1a.210817.036.a8-11300236-unofficial-unsigned.zip/download')
        G = types.InlineKeyboardButton("LineageOs v19.0 A12 Vanilla", url='https://sourceforge.net/projects/other007/files/lineage-19.0-20211207-UNOFFICIAL-vayu.zip/download')
        Z = types.InlineKeyboardButton("<<= Back", callback_data="Pure-va")
        mkup.add(F,G,J,Z)
        text = (
        "<b>------------     Poco X3 Pro     ------------</b>\n"
        "    <b>--------   Pure Andriod   --------</b>\n"
        "      <b>----------   Unofficail   ----------</b>"
        )
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=mkup, parse_mode='HTML')
        bot.answer_callback_query(call.id)
    else:
        bot.edit_message_text('‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏£‡πâ‡∏≤‡∏≤ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏¥‡πâ‡∏° > /auth', call.message.chat.id, call.message.message_id)

#------------------------------------------ Recovery -------------------------------------------------------#
#------------------------------------------ Recovery -------------------------------------------------------#
@bot.callback_query_handler(func=lambda call: call.data == 'reli')
def rom_vayu_rec(call):
    if call.message.chat.id in users:
        mkup = types.InlineKeyboardMarkup(row_width=1)
        A= types.InlineKeyboardButton("TWRP", url='https://dl.twrp.me/vayu/twrp-3.6.0_11-0-vayu.img')
        B = types.InlineKeyboardButton("Orange Fox", url='https://us-dl.orangefox.download/61925ad3df607d814a41854e')
        Z = types.InlineKeyboardButton("<<= Back", callback_data="Backva")
        mkup.add(A,B,Z)
        text = (
            "<b>------------     Poco X3 Pro     ------------</b>\n"
            "       <b>------------  Recovery  ------------</b>     "
        )
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=mkup, parse_mode='HTML')
        bot.answer_callback_query(call.id)
    else:
        bot.edit_message_text('‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏£‡πâ‡∏≤‡∏≤ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏¥‡πâ‡∏° > /auth', call.message.chat.id, call.message.message_id)
#------------------------------------------ Kernels -------------------------------------------------------#
#------------------------------------------ Kernels -------------------------------------------------------#
@bot.callback_query_handler(func=lambda call: call.data == 'kerli')
def rom_vayu_rec(call):
    if call.message.chat.id in users:
        mkup = types.InlineKeyboardMarkup(row_width=1)
        Z = types.InlineKeyboardButton("<<= Back", callback_data="Backva")
        mkup.add(Z)
        text = (
            "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï"
        )
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=mkup, parse_mode='HTML')
        bot.answer_callback_query(call.id)
    else:
        bot.edit_message_text('‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏£‡πâ‡∏≤‡∏≤ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏¥‡πâ‡∏° > /auth', call.message.chat.id, call.message.message_id)

#------------------------------------------ Home Menu -----------------------------------------------------#
#------------------------------------------ Home Menu -----------------------------------------------------#
#------------------------------------------ Home Menu -----------------------------------------------------#

@bot.callback_query_handler(func=lambda call: call.data == 'Backva')
def a_choosen(call):
    if call.message.chat.id in users:
        mkup = types.InlineKeyboardMarkup(row_width=2)
        EU = types.InlineKeyboardButton("ROM", callback_data="romva")
        GR = types.InlineKeyboardButton("RECOVER", callback_data="reva")
        GB = types.InlineKeyboardButton("KERNEL", callback_data="kerva")
        Ex = types.InlineKeyboardButton("Exit", callback_data="end")
        mkup.add(EU, GR, GB, Ex)
        text = "<b>Poco X3 Pro</b> - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡πâ‡∏≤"
        bot.edit_message_text( text, call.message.chat.id, call.message.message_id, reply_markup=mkup, parse_mode='HTML')
        bot.answer_callback_query(call.id)
    else:
        bot.edit_message_text('‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏£‡πâ‡∏≤‡∏≤ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏¥‡πâ‡∏° > /auth', call.message.chat.id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data == 'Backli')
def b_choosen(call):
    if call.message.chat.id in users:
        mkup = types.InlineKeyboardMarkup(row_width=2)
        EU = types.InlineKeyboardButton("ROM", callback_data="romva")
        GR = types.InlineKeyboardButton("RECOVER", callback_data="reva")
        GB = types.InlineKeyboardButton("KERNEL", callback_data="kerva")
        Ex = types.InlineKeyboardButton("Exit", callback_data="end")
        mkup.add(EU, GR, GB, Ex)
        text = "<b>Redmi 9t/Poco M3</b> - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡πâ‡∏≤"
        bot.edit_message_text( text, call.message.chat.id, call.message.message_id, reply_markup=mkup, parse_mode='HTML')
        bot.answer_callback_query(call.id)
    else:
        bot.edit_message_text('‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏£‡πâ‡∏≤‡∏≤ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏¥‡πâ‡∏° > /auth', call.message.chat.id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data == 'Backmo')
def c_choosen(call):
    if call.message.chat.id in users:
        mkup = types.InlineKeyboardMarkup(row_width=2)
        EU = types.InlineKeyboardButton("ROM", callback_data="romva")
        GR = types.InlineKeyboardButton("RECOVER", callback_data="reva")
        GB = types.InlineKeyboardButton("KERNEL", callback_data="kerva")
        Ex = types.InlineKeyboardButton("Exit", callback_data="end")
        mkup.add(EU, GR, GB, Ex)
        text = "<b>Redmi Note 10</b> - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡πâ‡∏≤"
        bot.edit_message_text( text, call.message.chat.id, call.message.message_id, reply_markup=mkup, parse_mode='HTML')
        bot.answer_callback_query(call.id)
    else:
        bot.edit_message_text('‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏£‡πâ‡∏≤‡∏≤ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏¥‡πâ‡∏° > /auth', call.message.chat.id, call.message.message_id)
    
#------------------------------------------ End Command -------------------------------------------------#
@bot.callback_query_handler(func=lambda call: call.data == 'end')
def end(call):
    if call.message.chat.id in users:
        bot.edit_message_text('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', call.message.chat.id, call.message.message_id)
    else:
        bot.edit_message_text('‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏£‡πâ‡∏≤‡∏≤ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏¥‡πâ‡∏° > /auth', call.message.chat.id, call.message.message_id)

#------------------------------------------ End Inline -----------------------------------------------------#
#------------------------------------------ End Inline -----------------------------------------------------#
#------------------------------------------ End Inline -----------------------------------------------------#

#------------------------------------------ Note --------------------------------------------#
#------------------------------------------ Note --------------------------------------------#
#------------------------------------------ Note --------------------------------------------#
@bot.callback_query_handler(func=lambda call: call.data == 'sma') # Show my account
def showdata(call : types.CallbackQuery):
    if call.message.chat.id in users:
        bt = types.InlineKeyboardMarkup()
        lst = types.InlineKeyboardButton('‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö', callback_data='Back')
        bt.add(lst)
        cur.execute("SELECT Name FROM Face")
        ps = ""
        for row in cur.fetchall():
            row = row[0]
            ps = ps + '- ' + row + '\n'
        text = "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ :\n{ls}".format(ls=ps)
        bot.edit_message_text(str(text), call.message.chat.id, call.message.message_id, reply_markup=bt)
        cnx.commit()
        bot.answer_callback_query(call.id)
    else:
        bot.edit_message_text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏¥‡πâ‡∏° -> /auth', call.message.chat.id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data == 'smd') # Show my data
def showdata2(call : types.CallbackQuery):
    if call.message.chat.id in users:
        cur.execute("SELECT Name FROM Face")
        ps = ""
        for row in cur.fetchall():
            row = row[0]
            ps = ps + '- ' + row + '\n'
        text = "‡∏≠‡∏¢‡∏≤‡∏Å‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏´‡∏ô‡πÄ‡∏≠‡πà‡∏¢\n\n‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ :\n{ls}".format(ls=ps)
        s = bot.edit_message_text(str(text), call.message.chat.id, call.message.message_id)
        bot.register_next_step_handler(s, showdata3)
        bot.answer_callback_query(call.id)
        cnx.commit()
    else:
        bot.edit_message_text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏¥‡πâ‡∏° -> /auth', call.message.chat.id, call.message.message_id)

def showdata3(message):
    bc = types.InlineKeyboardMarkup()
    bc.add(types.InlineKeyboardButton('Back', callback_data='Back'))
    cur.execute("SELECT Name FROM Face WHERE Name = '{text}'".format(text=message.text))
    cr = cur.fetchall()
    if message.text in str(cr):
        cur.execute("SELECT * FROM Face WHERE Name = '{text}'".format(text=message.text))
        cr = cur.fetchall()
        bot.send_message(message.chat.id, '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ\n\nName: <b>{Name}</b>\nEmail: <b>{Email}</b>\nPassword: <tg-spoiler>{Password}</tg-spoiler>'.format(Name=cr[0][1], Email=cr[0][2], Password=cr[0][3]), parse_mode='HTML', reply_markup=bc)
    else:
        bot.send_message(message.chat.id, '‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ä‡∏∑‡πà‡∏≠ {text} ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'.format(text=message.text), reply_markup=bc)

@bot.callback_query_handler(func=lambda call: call.data == 'add') # Add data
def add(call : types.CallbackQuery):
    if call.message.chat.id in users:
        text = """‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏¢\n\n‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏ô‡∏∞ \n'‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', '‡∏≠‡∏µ‡πÄ‡∏°‡∏• ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô'\n\n<b>‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á</b>\n<b>Myacc</b> <b>email@ex.com</b> <b>passwd10</b>"""
        s = bot.edit_message_text(str(text), call.message.chat.id, call.message.message_id, parse_mode='HTML')
        bot.register_next_step_handler(s, add2)
        bot.answer_callback_query(call.id)
    else:
        bot.edit_message_text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏¥‡πâ‡∏° -> /auth', call.message.chat.id, call.message.message_id)

def add2(message):
    mmsg = message.text.split(' ')
    bc = types.InlineKeyboardMarkup()
    bc.add(types.InlineKeyboardButton('Back', callback_data='Back'))
    if len(mmsg) == 3:
        cur.execute("SELECT Name FROM Face")
        cr = cur.fetchall()
        if message.text in str(cr):
            bot.send_message(message.chat.id, '‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏î‡πâ‡∏≠ ‡πÄ‡∏≠‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà', reply_markup=bc)
        else:
            cur.execute("INSERT INTO Face (Name, Email, Password) VALUES ('{Name}', '{Email}', '{Password}')".format(Name=mmsg[0], Email=mmsg[1], Password=mmsg[2]))
            bot.delete_message(message.chat.id, message.message_id)
            bot.send_message(message.chat.id, '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', reply_markup=bc)
            cnx.commit()
    else:
        bot.send_message(message.chat.id, '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡πà‡πÄ‡∏Å‡∏≤‡∏∞‡∏ß‡πà‡∏≤', reply_markup=bc)

@bot.callback_query_handler(func=lambda call: call.data == 'del')
def del2(call : types.CallbackQuery):
    if call.message.chat.id in users:
        cur.execute("SELECT Name FROM Face")
        ps = ""
        for row in cur.fetchall():
            row = row[0]
            ps = ps + '- ' + row + '\n'
        text = "‡∏≠‡∏¢‡∏≤‡∏Å‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏´‡∏ô‡πÄ‡∏≠‡πà‡∏¢\n\n‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ :\n{ls}".format(ls=ps)
        s = bot.edit_message_text(str(text), call.message.chat.id, call.message.message_id)
        bot.register_next_step_handler(s, del3)
    else:
        bot.edit_message_text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏¥‡πâ‡∏° -> /auth', call.message.chat.id, call.message.message_id)

def del3(message):
    bc = types.InlineKeyboardMarkup()
    bc.add(types.InlineKeyboardButton('Back', callback_data='Back'))
    cur.execute("SELECT Name FROM Face")
    cr = cur.fetchall()
    if message.text in str(cr):
        cur.execute("DELETE FROM Face WHERE Name = '{text}'".format(text=message.text))
        cur.execute("alter table Face auto_increment = 1")
        bot.send_message(message.chat.id, '‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', reply_markup=bc)
    else:
        bot.send_message(message.chat.id, '‡∏•‡∏ö <b>{text}</b> ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'.format(text=message.text), reply_markup=bc, parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data == 'exit')
def endin(call : types.CallbackQuery):
    if call.message.chat.id in users:
        bot.edit_message_text('‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô', call.message.chat.id, call.message.message_id)
        bot.answer_callback_query(call.id)
    else:
        bot.edit_message_text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏¥‡πâ‡∏° -> /auth', call.message.chat.id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data == 'Back')
def back(call : types.CallbackQuery):
    if call.message.chat.id in users:
        bt = types.InlineKeyboardMarkup(row_width=2)
        lst = types.InlineKeyboardButton('‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', callback_data='sma')
        lst1 = types.InlineKeyboardButton('‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', callback_data='smd')
        lst2 = types.InlineKeyboardButton('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', callback_data='add')
        lst3 = types.InlineKeyboardButton('‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', callback_data='del')
        lst4 = types.InlineKeyboardButton('‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', callback_data='exit')
        bt.add(lst, lst1, lst2, lst3, lst4)
        bot.edit_message_text('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡πâ‡∏≤', call.message.chat.id, call.message.message_id, reply_markup=bt)
        bot.answer_callback_query(call.id)
    else:
        bot.edit_message_text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏¥‡πâ‡∏° -> /auth', call.message.chat.id, call.message.message_id)


@bot.message_handler(commands=['ver'])
def version_bot(message):
    if message.chat.id in users:
        bot.send_message(message.chat.id, dp.ver, parse_mode='HTML')
        logging.basicConfig(filename='user.log', encoding='utf-8', format='%(asctime)s %(message)s', datefmt='%d/%m/%Y %I:%M:%S %p')
        logging.warning((message.chat.id, message.from_user.first_name))
    else:
        bot.send_message(message.chat.id , '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏à‡πâ‡∏≤ ‡∏à‡∏¥‡πâ‡∏° -> /auth')
    print(message.from_user.first_name, " : ", message.text)

@bot.message_handler(func=lambda message: True)
def echo_message(message):
    if message.chat.id in users:
        logging.basicConfig(filename='user.log', encoding='utf-8', format='%(asctime)s %(message)s', datefmt='%d/%m/%Y %I:%M:%S %p')
        logging.warning((message.from_user.first_name, message.text))
        bt2.send_message(tk.admin, text = "<b>User </b> : " + message.from_user.full_name + "\n<b>User ID </b>: " + str(message.chat.id) + "\n<b>Text : </b>" + message.text , parse_mode='HTML')
        bot.reply_to(message, '‡∏≠‡∏¢‡πà‡∏≤‡∏°‡∏≤‡∏à‡∏¥‡∏á‡∏Æ‡∏¥‡∏á‡∏á‡∏à‡∏≠‡∏á‡∏Æ‡∏≠‡∏á‡πÅ‡∏ñ‡∏ß‡∏ô‡∏µ‡πâ‡∏ô‡∏∞ ‡∏û‡∏¥‡∏°‡∏û‡πå /help ‡∏Å‡πà‡∏≠‡∏ô', parse_mode='HTML', reply_markup=hd)
    else:
        bot.send_message(message.chat.id , '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏à‡πâ‡∏≤ ‡∏à‡∏¥‡πâ‡∏° -> /auth',reply_markup=hd)
    print(message.from_user.first_name, " : ", message.text)

bot.add_custom_filter(custom_filters.TextMatchFilter())
bot.add_custom_filter(custom_filters.TextStartsFilter())